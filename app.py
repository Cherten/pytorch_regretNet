import os
import sys
import torch
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt
import time
import json
from pathlib import Path
import pandas as pd
import matplotlib.ticker as ticker
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D

# –ö–µ—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
@st.cache_resource  
def load_cached_model(selected_config, selected_iter, model_path):
    """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from run_train import settings
    config_settings = settings[selected_config]
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cfg_module = __import__(f"cfgs.{config_settings['cfg']}", fromlist=["cfg"])
    cfg = cfg_module.cfg
    cfg.test.restore_iter = selected_iter
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
    net_module = __import__(f"nets.{config_settings['net']}", fromlist=["Net"])
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    checkpoint = torch.load(model_path, map_location=torch.device('cpu'))
    state_dict = checkpoint['model_state_dict']
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–∑ state_dict
    def infer_architecture_from_state_dict(state_dict):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–∑ state_dict –º–æ–¥–µ–ª–∏"""
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–ª–æ—è–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        alloc_layers = [k for k in state_dict.keys() if k.startswith('a_net.') and 'weight' in k]
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–ª–æ—è–º –ø–ª–∞—Ç–µ–∂–µ–π  
        payment_layers = [k for k in state_dict.keys() if k.startswith('p_net.') and 'weight' in k]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π)
        num_a_layers = len(alloc_layers) - 1 if len(alloc_layers) > 0 else 1
        num_p_layers = len(payment_layers) - 1 if len(payment_layers) > 0 else 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä—ã—Ç—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
        if len(alloc_layers) > 1:
            # –ö–ª—é—á –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
            first_hidden_key = min([k for k in alloc_layers if not k.endswith('output.weight')])
            num_a_hidden = state_dict[first_hidden_key].shape[0]
        else:
            num_a_hidden = cfg.net.num_a_hidden_units  # fallback
            
        if len(payment_layers) > 1:
            # –ö–ª—é—á –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è –ø–ª–∞—Ç–µ–∂–µ–π
            first_hidden_key = min([k for k in payment_layers if not k.endswith('output.weight')])
            num_p_hidden = state_dict[first_hidden_key].shape[0]
        else:
            num_p_hidden = cfg.net.num_p_hidden_units  # fallback
        
        return num_a_layers, num_p_layers, num_a_hidden, num_p_hidden
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏–∑ checkpoint'–∞
    try:
        num_a_layers, num_p_layers, num_a_hidden, num_p_hidden = infer_architecture_from_state_dict(state_dict)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        cfg.net.num_a_layers = num_a_layers
        cfg.net.num_p_layers = num_p_layers
        cfg.net.num_a_hidden_units = num_a_hidden
        cfg.net.num_p_hidden_units = num_p_hidden
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        net = net_module.Net(cfg)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
        net.load_state_dict(state_dict)
        net.eval()
        
        return net, cfg, config_settings
        
    except Exception:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        common_configs = [
            {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 50, 'num_p_hidden': 50},
            {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 100, 'num_p_hidden': 100},
            {'num_a_layers': 3, 'num_p_layers': 3, 'num_a_hidden': 50, 'num_p_hidden': 50},
            {'num_a_layers': 3, 'num_p_layers': 3, 'num_a_hidden': 100, 'num_p_hidden': 100},
            {'num_a_layers': 1, 'num_p_layers': 1, 'num_a_hidden': 50, 'num_p_hidden': 50},
            {'num_a_layers': 4, 'num_p_layers': 4, 'num_a_hidden': 50, 'num_p_hidden': 50},
            {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 200, 'num_p_hidden': 200},
            {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 128, 'num_p_hidden': 128},
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–µ–≤
            {'num_a_layers': 5, 'num_p_layers': 5, 'num_a_hidden': 50, 'num_p_hidden': 50},
            {'num_a_layers': 6, 'num_p_layers': 6, 'num_a_hidden': 50, 'num_p_hidden': 50},
            {'num_a_layers': 6, 'num_p_layers': 6, 'num_a_hidden': 100, 'num_p_hidden': 100},
            {'num_a_layers': 7, 'num_p_layers': 7, 'num_a_hidden': 50, 'num_p_hidden': 50},
            {'num_a_layers': 8, 'num_p_layers': 8, 'num_a_hidden': 50, 'num_p_hidden': 50},
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤
            {'num_a_layers': 4, 'num_p_layers': 4, 'num_a_hidden': 100, 'num_p_hidden': 100},
            {'num_a_layers': 5, 'num_p_layers': 5, 'num_a_hidden': 100, 'num_p_hidden': 100},
            {'num_a_layers': 3, 'num_p_layers': 3, 'num_a_hidden': 200, 'num_p_hidden': 200},
            {'num_a_layers': 4, 'num_p_layers': 4, 'num_a_hidden': 200, 'num_p_hidden': 200},
        ]
        
        for config_attempt in common_configs:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                cfg.net.num_a_layers = config_attempt['num_a_layers']
                cfg.net.num_p_layers = config_attempt['num_p_layers']
                cfg.net.num_a_hidden_units = config_attempt['num_a_hidden']
                cfg.net.num_p_hidden_units = config_attempt['num_p_hidden']
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ç—å
                net = net_module.Net(cfg)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
                net.load_state_dict(state_dict)
                net.eval()
                
                return net, cfg, config_settings
                
            except Exception:
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@st.cache_data
def find_model_iterations(config_name):
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º settings –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from run_train import settings
    
    if config_name in settings:
        config_settings = settings[config_name]
        cfg_module = __import__(f"cfgs.{config_settings['cfg']}", fromlist=["cfg"])
        cfg = cfg_module.cfg
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        experiment_dir = Path(cfg.dir_name)
        if not experiment_dir.exists():
            return []
        
        # –ò—â–µ–º –º–æ–¥–µ–ª–∏
        model_files = list(experiment_dir.glob("model-*.pt"))
        iterations = [int(f.name.split("-")[1].split(".")[0]) for f in model_files]
        iterations.sort()
        return iterations
    return []

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(
    page_title="RegretNet - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã —Å –≥–ª—É–±–æ–∫–∏–º –æ–±—É—á–µ–Ω–∏–µ–º",
    page_icon="üìä",
    layout="wide"
)

# –°—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1E3A8A;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2563EB;
        margin-bottom: 0.5rem;
    }
    .info-text {
        font-size: 1rem;
        color: #4B5563;
    }
    .metric-card {
        background-color: #F3F4F6;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    .metric-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #1E3A8A;
    }
    .metric-label {
        font-size: 0.9rem;
        color: #4B5563;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown('<div class="main-header">RegretNet - –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤</div>', unsafe_allow_html=True)
st.markdown('<div class="info-text">–û–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</div>', unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# –í–∞–∂–Ω–æ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ settings, –Ω–µ –∑–∞–ø—É—Å–∫–∞—è –ø—Ä–∏ —ç—Ç–æ–º –æ–±—É—á–µ–Ω–∏–µ
@st.cache_data
def load_auction_settings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    # –í run_train.py –æ–±—É—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –æ–±–µ—Ä–Ω—É—Ç–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    from run_train import settings
    return settings

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é find_model_iterations, –æ–±—ä—è–≤–ª–µ–Ω–Ω—É—é –≤—ã—à–µ

try:
    settings = load_auction_settings()
    auction_configs = list(settings.keys())
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {str(e)}")
    st.exception(e)
    auction_configs = []

# –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
st.sidebar.markdown('<div class="sub-header">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>', unsafe_allow_html=True)

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞: –æ–±—É—á–µ–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
mode = st.sidebar.radio("–†–µ–∂–∏–º", ["–û–±—É—á–µ–Ω–∏–µ", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤"])

if mode == "–û–±—É—á–µ–Ω–∏–µ":
    st.markdown('<div class="sub-header">–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</div>', unsafe_allow_html=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ–±—É—á–µ–Ω–∏—è", expanded=False):
        st.markdown("""
        **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        - **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π**: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        - **–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —à–∞–≥
        - **–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è**: –®–∞–≥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞
        - **–ß–∞—Å—Ç–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è**: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–æ–¥–µ–ª–∏
        
        **–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –õ–∞–≥—Ä–∞–Ω–∂–∞** —É–ø—Ä–∞–≤–ª—è—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –≤ –∑–∞–¥–∞—á–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
        - **–ù–∞—á–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å**: –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        - **–ú–∏–Ω/–ú–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è**: –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –õ–∞–≥—Ä–∞–Ω–∂–∞
        - **–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**: –ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        
        **–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤:
        - **Adam**: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –º–æ–º–µ–Ω—Ç—É–º–æ–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        - **SGD**: –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫
        - **Weight decay**: L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        
        **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è** –∏–∑–º–µ–Ω—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
        - **StepLR**: –£–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–∞–∂–¥—ã–µ N —à–∞–≥–æ–≤
        - **ExponentialLR**: –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
        - **CosineAnnealingLR**: –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        
        **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏**:
        - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤**: –ì–ª—É–±–∏–Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
        - **–°–∫—Ä—ã—Ç—ã–µ –µ–¥–∏–Ω–∏—Ü—ã**: –®–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
        - **Dropout**: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–æ–≤ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ)
        """)
    
    # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
    selected_config = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞", auction_configs)
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    st.markdown("### –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    preset_config = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", 
                                ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ", "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ"], 
                                help="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é")
    
    # –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    presets = {
        "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ": {
            "max_iter": 500, "batch_size": 64, "lr": 0.003, "gd_iter": 15,
            "w_rgt_init": 3.0, "num_a_layers": 2, "num_p_layers": 2,
            "use_lr_scheduler": False, "use_early_stopping": True
        },
        "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ": {
            "max_iter": 5000, "batch_size": 32, "lr": 0.001, "gd_iter": 50,
            "w_rgt_init": 5.0, "num_a_layers": 3, "num_p_layers": 3,
            "use_lr_scheduler": True, "use_early_stopping": True
        },
        "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ": {
            "max_iter": 10000, "batch_size": 16, "lr": 0.0005, "gd_iter": 100,
            "w_rgt_init": 10.0, "num_a_layers": 4, "num_p_layers": 4,
            "use_lr_scheduler": True, "use_early_stopping": False
        }
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    def get_preset_value(key, default_value):
        if preset_config != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ" and key in presets[preset_config]:
            return presets[preset_config][key]
        return default_value
    
    # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º expander'–æ–≤
    st.markdown("### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è")
    col1, col2, col3 = st.columns(3)
    with col1:
        max_iter = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", min_value=100, max_value=20000, 
                                  value=get_preset_value("max_iter", 2000), step=100)
        batch_size = st.number_input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞", min_value=16, max_value=512, 
                                    value=get_preset_value("batch_size", 64), step=16)
    with col2:
        lr = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", min_value=0.0001, max_value=0.01, 
                            value=get_preset_value("lr", 0.001), format="%.4f", step=0.0001)
        gd_iter = st.number_input("–ò—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è misreports", min_value=10, max_value=200, 
                                 value=get_preset_value("gd_iter", 25), step=5)
    with col3:
        save_frequency = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", min_value=10, max_value=1000, value=100, step=10, help="–ö–∞–∂–¥—ã–µ N –∏—Ç–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–æ–¥–µ–ª—å")
        validation_frequency = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", min_value=1, max_value=100, value=10, step=1, help="–ö–∞–∂–¥—ã–µ N –∏—Ç–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –õ–∞–≥—Ä–∞–Ω–∂–∞
    with st.expander("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –õ–∞–≥—Ä–∞–Ω–∂–∞", expanded=False):
        col1, col2, col3 = st.columns(3)
        with col1:
            w_rgt_init = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞", min_value=0.1, max_value=50.0, 
                                        value=get_preset_value("w_rgt_init", 5.0), step=0.5)
            w_rgt_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞", min_value=1.0, max_value=100.0, value=20.0, step=1.0)
        with col2:
            w_rgt_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞", min_value=0.01, max_value=5.0, value=0.1, step=0.01)
            update_rate = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", min_value=0.01, max_value=20.0, value=1.0, step=0.1)
        with col3:
            lagrange_update_freq = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –õ–∞–≥—Ä–∞–Ω–∂–∞", min_value=1, max_value=50, value=5, step=1, help="–ö–∞–∂–¥—ã–µ N –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª—è—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª–∏")
            rgt_start_iter = st.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è Regret", min_value=0, max_value=1000, value=0, step=50, help="–° –∫–∞–∫–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—Ç—å —É—á–∏—Ç—ã–≤–∞—Ç—å regret")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞", expanded=False):
        optimizer_type = st.selectbox("–¢–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞", ["Adam", "SGD", "RMSprop"], index=0)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            weight_decay = st.number_input("–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è L2 (weight_decay)", min_value=0.0, max_value=0.01, value=0.0, format="%.6f", step=0.000001)
            momentum = st.number_input("Momentum (—Ç–æ–ª—å–∫–æ –¥–ª—è SGD)", min_value=0.0, max_value=0.999, value=0.9, step=0.01) if optimizer_type == "SGD" else 0.9
        with col2:
            if optimizer_type == "Adam":
                beta1 = st.number_input("Beta1 (Adam)", min_value=0.5, max_value=0.999, value=0.9, step=0.01)
                beta2 = st.number_input("Beta2 (Adam)", min_value=0.9, max_value=0.9999, value=0.999, step=0.001)
            else:
                beta1, beta2 = 0.9, 0.999
        with col3:
            if optimizer_type in ["Adam", "RMSprop"]:
                eps = st.number_input("Epsilon", min_value=1e-10, max_value=1e-6, value=1e-8, format="%.2e")
            else:
                eps = 1e-8
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
    with st.expander("üìà –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è", expanded=False):
        use_lr_scheduler = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è", 
                                       value=get_preset_value("use_lr_scheduler", False))
        
        if use_lr_scheduler:
            col1, col2, col3 = st.columns(3)
            with col1:
                lr_scheduler_type = st.selectbox("–¢–∏–ø –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", ["StepLR", "ExponentialLR", "CosineAnnealingLR", "ReduceLROnPlateau"])
            with col2:
                if lr_scheduler_type == "StepLR":
                    lr_step_size = st.number_input("–†–∞–∑–º–µ—Ä —à–∞–≥–∞ (StepLR)", min_value=50, max_value=2000, value=500, step=50)
                    lr_gamma = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è", min_value=0.1, max_value=0.9, value=0.5, step=0.1)
                elif lr_scheduler_type == "ExponentialLR":
                    lr_gamma = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã", min_value=0.9, max_value=0.999, value=0.95, step=0.01)
                    lr_step_size = None
                elif lr_scheduler_type == "CosineAnnealingLR":
                    T_max = st.number_input("T_max (–ø–µ—Ä–∏–æ–¥)", min_value=100, max_value=5000, value=1000, step=100)
                    lr_step_size, lr_gamma = None, None
                else:  # ReduceLROnPlateau
                    lr_patience = st.number_input("–¢–µ—Ä–ø–µ–Ω–∏–µ (—ç–ø–æ—Ö–∏ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è)", min_value=5, max_value=100, value=20, step=5)
                    lr_gamma = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è", min_value=0.1, max_value=0.9, value=0.5, step=0.1)
                    lr_step_size = None
            with col3:
                lr_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", min_value=1e-8, max_value=1e-4, value=1e-6, format="%.2e")
        else:
            lr_scheduler_type = None
            lr_step_size, lr_gamma, T_max, lr_patience, lr_min = None, None, None, None, None
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    with st.expander("üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è", expanded=False):
        col1, col2, col3 = st.columns(3)
        with col1:
            dropout_rate = st.number_input("Dropout rate", min_value=0.0, max_value=0.8, value=0.0, step=0.05)
            batch_norm = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Batch Normalization", value=False)
        with col2:
            num_a_layers = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", min_value=1, max_value=10, 
                                          value=get_preset_value("num_a_layers", 2), step=1)
            num_p_layers = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –ø–ª–∞—Ç–µ–∂–µ–π", min_value=1, max_value=10, 
                                          value=get_preset_value("num_p_layers", 2), step=1)
        with col3:
            num_a_hidden = st.number_input("–°–∫—Ä—ã—Ç—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)", min_value=16, max_value=512, value=100, step=16)
            num_p_hidden = st.number_input("–°–∫—Ä—ã—Ç—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (–ø–ª–∞—Ç–µ–∂–∏)", min_value=16, max_value=512, value=100, step=16)
            activation = st.selectbox("–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", ["tanh", "relu", "elu", "leaky_relu"], index=0)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞
    with st.expander("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ä–∞–Ω–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            use_early_stopping = st.checkbox("–†–∞–Ω–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤", value=get_preset_value("use_early_stopping", False))
            if use_early_stopping:
                early_stopping_patience = st.number_input("–¢–µ—Ä–ø–µ–Ω–∏–µ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞", min_value=10, max_value=500, value=100, step=10)
                early_stopping_min_delta = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ", min_value=0.0001, max_value=0.01, value=0.001, format="%.4f")
            else:
                early_stopping_patience, early_stopping_min_delta = None, None
        with col2:
            log_frequency = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", min_value=1, max_value=100, value=10, step=1)
            verbose_training = st.checkbox("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", value=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            grad_clip = st.number_input("–û–±—Ä–µ–∑–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)", min_value=0.0, max_value=10.0, value=0.0, step=0.1)
            warmup_steps = st.number_input("–®–∞–≥–æ–≤ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞", min_value=0, max_value=1000, value=0, step=50)
        with col2:
            seed = st.number_input("–°–ª—É—á–∞–π–Ω–æ–µ –∑–µ—Ä–Ω–æ", min_value=0, max_value=999999, value=42, step=1)
            num_workers = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ worker'–æ–≤", min_value=0, max_value=8, value=0, step=1, help="–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"):
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
            current_settings = {
                "max_iter": max_iter,
                "batch_size": batch_size,
                "lr": lr,
                "gd_iter": gd_iter,
                "w_rgt_init": w_rgt_init,
                "w_rgt_max": w_rgt_max,
                "w_rgt_min": w_rgt_min,
                "update_rate": update_rate,
                "lagrange_update_freq": lagrange_update_freq,
                "rgt_start_iter": rgt_start_iter,
                "optimizer_type": optimizer_type,
                "weight_decay": weight_decay,
                "momentum": momentum,
                "beta1": beta1,
                "beta2": beta2,
                "eps": eps,
                "use_lr_scheduler": use_lr_scheduler,
                "lr_scheduler_type": lr_scheduler_type if use_lr_scheduler else None,
                "num_a_layers": num_a_layers,
                "num_p_layers": num_p_layers,
                "num_a_hidden": num_a_hidden,
                "num_p_hidden": num_p_hidden,
                "activation": activation,
                "dropout_rate": dropout_rate,
                "batch_norm": batch_norm,
                "use_early_stopping": use_early_stopping,
                "early_stopping_patience": early_stopping_patience if use_early_stopping else None,
                "grad_clip": grad_clip,
                "seed": seed
            }
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
            settings_json = json.dumps(current_settings, indent=2, ensure_ascii=False)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                data=settings_json,
                file_name=f"regretnet_settings_{selected_config}_{max_iter}iter.json",
                mime="application/json",
                help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª"
            )
    
    with col2:
        uploaded_file = st.file_uploader("üì§ –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", type=['json'], 
                                        help="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        if uploaded_file is not None:
            try:
                settings_data = json.load(uploaded_file)
                st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"):
                    st.json(settings_data)
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    # –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if selected_config:
        with st.expander("üìã –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                st.write(f"‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {selected_config}")
                st.write(f"‚Ä¢ –ò—Ç–µ—Ä–∞—Ü–∏–∏: {max_iter}")
                st.write(f"‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
                st.write(f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {lr:.4f}")
                st.write(f"‚Ä¢ GD –∏—Ç–µ—Ä–∞—Ü–∏–∏: {gd_iter}")
                
            with col2:
                st.markdown("**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**")
                st.write(f"‚Ä¢ –°–ª–æ–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {num_a_layers}")
                st.write(f"‚Ä¢ –°–ª–æ–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {num_p_layers}")
                st.write(f"‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: {num_a_hidden}")
                st.write(f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {activation}")
                if dropout_rate > 0:
                    st.write(f"‚Ä¢ Dropout: {dropout_rate}")
                
            with col3:
                st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**")
                st.write(f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞: {w_rgt_init}")
                st.write(f"‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: {optimizer_type}")
                if use_lr_scheduler:
                    st.write(f"‚Ä¢ LR –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {lr_scheduler_type}")
                if use_early_stopping:
                    st.write("‚Ä¢ –†–∞–Ω–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤: –í–∫–ª—é—á–µ–Ω")
                if grad_clip > 0:
                    st.write(f"‚Ä¢ –û–±—Ä–µ–∑–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤: {grad_clip}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def validate_settings():
        errors = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if max_iter < 100:
            errors.append("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100")
        if batch_size < 8:
            errors.append("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8")
        if lr <= 0 or lr > 0.1:
            warnings.append("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (0.0001-0.01)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –õ–∞–≥—Ä–∞–Ω–∂–∞
        if w_rgt_min >= w_rgt_max:
            errors.append("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")
        if w_rgt_init < w_rgt_min or w_rgt_init > w_rgt_max:
            warnings.append("–ù–∞—á–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        if num_a_layers < 1 or num_p_layers < 1:
            errors.append("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1")
        if num_a_hidden < 8 or num_p_hidden < 8:
            warnings.append("–ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä—ã—Ç—ã—Ö –µ–¥–∏–Ω–∏—Ü –º–æ–∂–µ—Ç —É—Ö—É–¥—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if dropout_rate >= 0.8:
            warnings.append("–í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dropout –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
        if use_early_stopping and early_stopping_patience and early_stopping_patience > max_iter // 10:
            warnings.append("–¢–µ—Ä–ø–µ–Ω–∏–µ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π")
        
        return errors, warnings
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="primary"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        errors, warnings = validate_settings()
        
        if errors:
            st.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:")
            for error in errors:
                st.error(f"‚Ä¢ {error}")
            st.stop()
        
        if warnings:
            st.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:")
            for warning in warnings:
                st.warning(f"‚Ä¢ {warning}")
            
            if not st.checkbox("–Ø –ø–æ–Ω–∏–º–∞—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                st.stop()
        
        st.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—É—á–µ–Ω–∏—é –º–æ–¥–µ–ª–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = st.progress(0)
        status_text = st.empty()
        metrics_container = st.container()
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_col1, chart_col2 = st.columns(2)
        revenue_chart = chart_col1.empty()
        regret_chart = chart_col2.empty()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if selected_config in settings:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                config_settings = settings[selected_config]
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                cfg_module = __import__(f"cfgs.{config_settings['cfg']}", fromlist=["cfg"])
                cfg = cfg_module.cfg
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                cfg.train.max_iter = max_iter
                cfg.train.batch_size = batch_size
                cfg.train.learning_rate = lr
                cfg.train.w_rgt_init_val = w_rgt_init
                cfg.train.update_rate = update_rate
                cfg.train.gd_iter = gd_iter
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –õ–∞–≥—Ä–∞–Ω–∂–∞
                if hasattr(cfg.train, 'w_rgt_max_val'):
                    cfg.train.w_rgt_max_val = w_rgt_max
                if hasattr(cfg.train, 'w_rgt_min_val'):
                    cfg.train.w_rgt_min_val = w_rgt_min
                if hasattr(cfg.train, 'lagrange_update_freq'):
                    cfg.train.lagrange_update_freq = lagrange_update_freq
                if hasattr(cfg.train, 'rgt_start_iter'):
                    cfg.train.rgt_start_iter = rgt_start_iter
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
                if hasattr(cfg.train, 'optimizer_type'):
                    cfg.train.optimizer_type = optimizer_type
                if hasattr(cfg.train, 'weight_decay'):
                    cfg.train.weight_decay = weight_decay
                if hasattr(cfg.train, 'momentum'):
                    cfg.train.momentum = momentum
                if hasattr(cfg.train, 'beta1'):
                    cfg.train.beta1 = beta1
                if hasattr(cfg.train, 'beta2'):
                    cfg.train.beta2 = beta2
                if hasattr(cfg.train, 'eps'):
                    cfg.train.eps = eps
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
                if hasattr(cfg.train, 'use_lr_scheduler'):
                    cfg.train.use_lr_scheduler = use_lr_scheduler
                if use_lr_scheduler and hasattr(cfg.train, 'lr_scheduler_type'):
                    cfg.train.lr_scheduler_type = lr_scheduler_type
                    if lr_step_size is not None and hasattr(cfg.train, 'lr_step_size'):
                        cfg.train.lr_step_size = lr_step_size
                    if lr_gamma is not None and hasattr(cfg.train, 'lr_gamma'):
                        cfg.train.lr_gamma = lr_gamma
                    if hasattr(cfg.train, 'T_max') and lr_scheduler_type == "CosineAnnealingLR":
                        cfg.train.T_max = T_max
                    if hasattr(cfg.train, 'lr_patience') and lr_scheduler_type == "ReduceLROnPlateau":
                        cfg.train.lr_patience = lr_patience
                    if lr_min is not None and hasattr(cfg.train, 'lr_min'):
                        cfg.train.lr_min = lr_min
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–µ—Ç–∏
                if hasattr(cfg.net, 'dropout_rate'):
                    cfg.net.dropout_rate = dropout_rate
                if hasattr(cfg.net, 'batch_norm'):
                    cfg.net.batch_norm = batch_norm
                if hasattr(cfg.net, 'num_a_layers'):
                    cfg.net.num_a_layers = num_a_layers
                if hasattr(cfg.net, 'num_p_layers'):
                    cfg.net.num_p_layers = num_p_layers
                if hasattr(cfg.net, 'num_a_hidden_units'):
                    cfg.net.num_a_hidden_units = num_a_hidden
                if hasattr(cfg.net, 'num_p_hidden_units'):
                    cfg.net.num_p_hidden_units = num_p_hidden
                if hasattr(cfg.net, 'activation'):
                    cfg.net.activation = activation
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if hasattr(cfg.train, 'save_frequency'):
                    cfg.train.save_frequency = save_frequency
                if hasattr(cfg.train, 'validation_frequency'):
                    cfg.train.validation_frequency = validation_frequency
                if hasattr(cfg.train, 'log_frequency'):
                    cfg.train.log_frequency = log_frequency
                if hasattr(cfg.train, 'verbose_training'):
                    cfg.train.verbose_training = verbose_training
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞
                if hasattr(cfg.train, 'use_early_stopping'):
                    cfg.train.use_early_stopping = use_early_stopping
                if use_early_stopping:
                    if hasattr(cfg.train, 'early_stopping_patience'):
                        cfg.train.early_stopping_patience = early_stopping_patience
                    if hasattr(cfg.train, 'early_stopping_min_delta'):
                        cfg.train.early_stopping_min_delta = early_stopping_min_delta
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if hasattr(cfg.train, 'grad_clip'):
                    cfg.train.grad_clip = grad_clip
                if hasattr(cfg.train, 'warmup_steps'):
                    cfg.train.warmup_steps = warmup_steps
                if hasattr(cfg.train, 'seed'):
                    cfg.train.seed = seed
                if hasattr(cfg.train, 'num_workers'):
                    cfg.train.num_workers = num_workers
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
                net_module = __import__(f"nets.{config_settings['net']}", fromlist=["Net"])
                net = net_module.Net(cfg)
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                gen_module = __import__(f"data.{config_settings['generator']}", fromlist=["Generator"])
                train_gen = gen_module.Generator(cfg, 'train')
                val_gen = gen_module.Generator(cfg, 'val')
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
                clip_ops = __import__("clip_ops.clip_ops", fromlist=[config_settings['clip_op']])
                clip_op = getattr(clip_ops, config_settings['clip_op'])
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Trainer
                from trainer import Trainer
                
                # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è
                revenue_history = []
                regret_history = []
                
                # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def training_callback(iter, metrics, time_elapsed):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress = min(iter / max_iter, 1.0)
                    progress_bar.progress(progress)
                    
                    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    revenue, regret, reg_loss, lag_loss, net_loss, w_rgt_mean, update_rate_val = metrics
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if iter > 0:
                        avg_time_per_iter = time_elapsed / iter
                        remaining_iters = max_iter - iter
                        estimated_remaining_time = avg_time_per_iter * remaining_iters
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                        def format_time(seconds):
                            if seconds < 60:
                                return f"{seconds:.0f}—Å"
                            elif seconds < 3600:
                                return f"{seconds/60:.1f}–º"
                            else:
                                return f"{seconds/3600:.1f}—á"
                        
                        time_info = f"–í—Ä–µ–º—è: {format_time(time_elapsed)} | –û—Å—Ç–∞–ª–æ—Å—å: {format_time(estimated_remaining_time)}"
                    else:
                        time_info = f"–í—Ä–µ–º—è: {time_elapsed:.2f}—Å"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status_text.text(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iter}/{max_iter} ({progress*100:.1f}%) | {time_info}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    revenue_history.append(revenue)
                    regret_history.append(regret)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
                    if iter % 10 == 0:
                        with metrics_container:
                            cols = st.columns(4)
                            cols[0].metric("–í—ã—Ä—É—á–∫–∞", f"{revenue:.4f}")
                            cols[1].metric("Regret", f"{regret:.4f}")
                            cols[2].metric("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞", f"{w_rgt_mean:.4f}")
                            cols[3].metric("–ü–æ—Ç–µ—Ä–∏", f"{net_loss:.4f}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                        x_axis = list(range(1, len(revenue_history) + 1))
                        
                        fig1, ax1 = plt.subplots()
                        ax1.plot(x_axis, revenue_history)
                        ax1.set_xlabel('–ò—Ç–µ—Ä–∞—Ü–∏—è')
                        ax1.set_ylabel('–í—ã—Ä—É—á–∫–∞')
                        ax1.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏')
                        revenue_chart.pyplot(fig1)
                        
                        fig2, ax2 = plt.subplots()
                        ax2.plot(x_axis, regret_history)
                        ax2.set_xlabel('–ò—Ç–µ—Ä–∞—Ü–∏—è')
                        ax2.set_ylabel('Regret')
                        ax2.set_title('–î–∏–Ω–∞–º–∏–∫–∞ Regret')
                        regret_chart.pyplot(fig2)
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                trainer = Trainer(cfg, 'train', net, clip_op, callback=training_callback)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                st.info(f"–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {selected_config}...")
                trainer.train((train_gen, val_gen))
                
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
                st.success(f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {cfg.dir_name}")
                
            else:
                st.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {selected_config} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            st.exception(e)

elif mode == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
    st.markdown('<div class="sub-header">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</div>', unsafe_allow_html=True)
    
    # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
    selected_config = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞", auction_configs)
    
    if selected_config:
        model_iterations = find_model_iterations(selected_config)
        
        if model_iterations:
            selected_iter = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Ç–µ—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏", model_iterations, format_func=lambda x: f"–ò—Ç–µ—Ä–∞—Ü–∏—è {x}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            col1, col2 = st.columns(2)
            with col1:
                num_batches = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", min_value=1, max_value=100, value=10)
                batch_size = st.number_input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞", min_value=16, max_value=256, value=100, step=16)
            
            with col2:
                gd_iter = st.number_input("–ò—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è misreports", min_value=10, max_value=2000, value=200, step=10)
                gd_lr = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è misreports", min_value=0.001, max_value=0.5, value=0.1, step=0.01)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                st.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏...")
                
                try:
                    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if selected_config in settings:
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        config_settings = settings[selected_config]
                        
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        cfg_module = __import__(f"cfgs.{config_settings['cfg']}", fromlist=["cfg"])
                        cfg = cfg_module.cfg
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        cfg.test.restore_iter = selected_iter
                        cfg.test.batch_size = batch_size
                        cfg.test.num_batches = num_batches
                        cfg.test.gd_iter = gd_iter
                        cfg.test.gd_lr = gd_lr
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
                        model_path = os.path.join(cfg.dir_name, f'model-{cfg.test.restore_iter}.pt')
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
                        try:
                            net, cfg_updated, _ = load_cached_model(selected_config, selected_iter, model_path)
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                            cfg = cfg_updated
                            cfg.test.restore_iter = selected_iter
                            cfg.test.batch_size = batch_size
                            cfg.test.num_batches = num_batches
                            cfg.test.gd_iter = gd_iter
                            cfg.test.gd_lr = gd_lr
                        except Exception as load_error:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(load_error)}")
                            st.exception(load_error)
                            st.stop()
                        
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                        gen_module = __import__(f"data.{config_settings['generator']}", fromlist=["Generator"])
                        test_gen = gen_module.Generator(cfg, 'test')
                        
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
                        clip_ops = __import__("clip_ops.clip_ops", fromlist=[config_settings['clip_op']])
                        clip_op = getattr(clip_ops, config_settings['clip_op'])
                        
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Trainer
                        from trainer import Trainer
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        progress_text = st.empty()
                        results_container = st.container()
                        
                        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        trainer = Trainer(cfg, 'test', net, clip_op)
                        trainer.net.eval()
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        progress_text.text("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                        trainer.test(test_gen)
                        progress_text.text("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
                        log_suffix = f"_iter_{cfg.test.restore_iter}_m_{cfg.test.num_misreports}_gd_{cfg.test.gd_iter}"
                        log_file = os.path.join(cfg.dir_name, f"test{log_suffix}.txt")
                        
                        if os.path.exists(log_file):
                            with open(log_file, 'r') as f:
                                log_content = f.read()
                            
                            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                            import re
                            results = {}
                            
                            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            metrics_pattern = r"(\w+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)"
                            matches = re.findall(metrics_pattern, log_content)
                            
                            for match in matches:
                                metric_name, mean, std = match
                                results[metric_name] = {"mean": float(mean), "std": float(std)}
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            with results_container:
                                st.markdown('<div class="sub-header">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>', unsafe_allow_html=True)
                                
                                metric_cols = st.columns(len(results))
                                for i, (metric, values) in enumerate(results.items()):
                                    with metric_cols[i]:
                                        st.markdown(f"""
                                        <div class="metric-card">
                                            <div class="metric-value">{values['mean']:.6f}</div>
                                            <div class="metric-label">{metric}</div>
                                            <div class="metric-label">Std: {values['std']:.6f}</div>
                                        </div>
                                        """, unsafe_allow_html=True)
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞
                                with st.expander("–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
                                    st.text(log_content)
                        else:
                            st.warning(f"–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
                    st.exception(e)
        else:
            st.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {selected_config}")

elif mode == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤":
    st.markdown('<div class="sub-header">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div>', unsafe_allow_html=True)
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    optimal_mechanism_values = {
        'additive_1x2_uniform': 0.550,
        'unit_1x2_uniform_23': 2.137,
        'additive_3x10_uniform': 5.541,
        'additive_5x10_uniform': 6.778,
        'additive_1x2_uniform_416_47': 9.781,
        'additive_1x2_uniform_triangle': 0.388,
        'unit_1x2_uniform': 0.384,
        'additive_2x2_uniform': 0.878
    }
    
    # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
    available_configs_with_optimal = [c for c in auction_configs if c in optimal_mechanism_values]
    
    if not available_configs_with_optimal:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞.")
        st.info("–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:")
        for config in optimal_mechanism_values.keys():
            st.write(f"‚Ä¢ {config}")
        st.stop()
    
    selected_config = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞", available_configs_with_optimal)
    
    if selected_config:
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if selected_config in settings:
            config_settings = settings[selected_config]
            cfg_module = __import__(f"cfgs.{config_settings['cfg']}", fromlist=["cfg"])
            cfg = cfg_module.cfg
            
            experiment_dir = Path(cfg.dir_name)
            if experiment_dir.exists():
                # –ò—â–µ–º –ª–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è
                train_logs = list(experiment_dir.glob("train*.txt"))
                
                if train_logs:
                    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è vs –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º")
                    
                    # –°—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª
                    def parse_train_log(log_file):
                        revenues = []
                        regrets = []
                        iterations = []
                        
                        with open(log_file, 'r') as f:
                            for line in f:
                                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
                                if "TRAIN (" in line and "Rev:" in line and "Rgt:" in line:
                                    parts = line.strip().split("|")
                                    
                                    try:
                                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
                                        iter_part = parts[0].strip()
                                        iter_num = int(iter_part[iter_part.find("(")+1:iter_part.find(")")])
                                        
                                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã—Ä—É—á–∫—É
                                        rev_part = parts[1].strip()
                                        revenue = float(rev_part[rev_part.find(":")+1:].strip())
                                        
                                        # –ò–∑–≤–ª–µ–∫–∞–µ–º regret
                                        rgt_part = parts[2].strip()
                                        regret = float(rgt_part[rgt_part.find(":")+1:].strip())
                                        
                                        iterations.append(iter_num)
                                        revenues.append(revenue)
                                        regrets.append(regret)
                                    except (ValueError, IndexError):
                                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                                        continue
                        
                        return iterations, revenues, regrets
                    
                    try:
                        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
                        latest_log = sorted(train_logs)[-1]
                        iterations, revenues, regrets = parse_train_log(latest_log)
                        
                        if iterations:
                            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞
                            optimal_value = optimal_mechanism_values[selected_config]
                            
                            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Å—Ç–∏–ª–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
                                                        
                                                        # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ (Test Revenue)
                            ax1.plot(iterations, revenues, 'b-', linewidth=2, label='RegretNet')
                            ax1.axhline(y=optimal_value, color='g', linestyle='--', linewidth=2, label='Optimal Mechanism')
                            ax1.set_xlabel('Iterations')
                            ax1.set_ylabel('Test Revenue')
                            ax1.set_title('Test Revenue')
                            ax1.legend()
                            ax1.grid(True, alpha=0.3)
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –æ—Å–∏ Y
                            y_min = min(min(revenues), optimal_value) * 0.95
                            y_max = max(max(revenues), optimal_value) * 1.05
                            ax1.set_ylim(y_min, y_max)
                            
                            # –ì—Ä–∞—Ñ–∏–∫ regret (Test Regret)
                            ax2.plot(iterations, regrets, 'b-', linewidth=2, label='RegretNet')
                            ax2.axhline(y=0, color='g', linestyle='--', linewidth=2, label='Optimal Mechanism')
                            ax2.set_xlabel('Iterations')
                            ax2.set_ylabel('Test Regret')
                            ax2.set_title('Test Regret')
                            ax2.legend()
                            ax2.grid(True, alpha=0.3)
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è regret (–æ–±—ã—á–Ω–æ –æ—Ç 0 –¥–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞)
                            ax2.set_ylim(0, max(regrets) * 1.1 if regrets else 0.01)
                            
                            plt.tight_layout()
                            st.pyplot(fig)
                             
                             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            col1, col2, col3 = st.columns(3)
                             
                            with col1:
                                final_revenue = revenues[-1] if revenues else 0
                                st.metric("–§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ RegretNet", f"{final_revenue:.4f}")
                                st.metric("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º", f"{optimal_value:.4f}")
                                 
                            with col2:
                                revenue_gap = abs(final_revenue - optimal_value) if revenues else 0
                                revenue_ratio = (final_revenue / optimal_value * 100) if revenues and optimal_value > 0 else 0
                                st.metric("–†–∞–∑—Ä—ã–≤ –≤ –≤—ã—Ä—É—á–∫–µ", f"{revenue_gap:.4f}")
                                st.metric("% –æ—Ç –æ–ø—Ç–∏–º—É–º–∞", f"{revenue_ratio:.2f}%")
                                
                            with col3:
                                final_regret = regrets[-1] if regrets else 0
                                st.metric("–§–∏–Ω–∞–ª—å–Ω—ã–π regret", f"{final_regret:.6f}")
                                if final_regret < 0.001:
                                    st.success("‚úÖ –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π regret!")
                                elif final_regret < 0.01:
                                    st.info("‚úì –ü—Ä–∏–µ–º–ª–µ–º—ã–π regret")
                                else:
                                    st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π regret")
                             
                             # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            with st.expander("üìä –î–µ—Ç–∞–ª–∏ –æ–±—É—á–µ–Ω–∏—è"):
                                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                                df = pd.DataFrame({
                                    '–ò—Ç–µ—Ä–∞—Ü–∏—è': iterations,
                                    '–í—ã—Ä—É—á–∫–∞': revenues,
                                    'Regret': regrets,
                                    '–†–∞–∑—Ä—ã–≤_—Å_–æ–ø—Ç–∏–º—É–º–æ–º': [abs(r - optimal_value) for r in revenues]
                                })
                                 
                                st.dataframe(df)
                                 
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                                csv = df.to_csv(index=False)
                                st.download_button(
                                    label="üíæ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV",
                                    data=csv,
                                    file_name=f"{selected_config}_training_results.csv",
                                    mime="text/csv"
                                )
                                
                            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                            with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"):
                                st.write(f"**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** {selected_config}")
                                st.write(f"**–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {optimal_value}")
                                st.write(f"**–í—Å–µ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–±—É—á–µ–Ω–∏—è:** {max(iterations) if iterations else 0}")
                                st.write(f"**–õ–æ–≥-—Ñ–∞–π–ª:** {latest_log}")
                                
                                # –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                                if len(revenues) > 10:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –∫ –æ–ø—Ç–∏–º—É–º—É
                                    last_10_revenues = revenues[-10:]
                                    avg_last_10 = np.mean(last_10_revenues)
                                    convergence_gap = abs(avg_last_10 - optimal_value) / optimal_value * 100
                                    
                                    st.write(f"**–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∏—Ç–µ—Ä–∞—Ü–∏–π:** {avg_last_10:.4f}")
                                    st.write(f"**–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–ø—Ç–∏–º—É–º–∞:** {convergence_gap:.2f}%")
                                    
                                    if convergence_gap < 1:
                                        st.success("üéØ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫ –æ–ø—Ç–∏–º—É–º—É!")
                                    elif convergence_gap < 5:
                                        st.info("‚úì –•–æ—Ä–æ—à–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å")
                                    else:
                                        st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–∞–ª–µ–∫–∞ –æ—Ç –æ–ø—Ç–∏–º—É–º–∞")
                            
                        else:
                            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–Ω–∞–º–∏–∫–µ –æ–±—É—á–µ–Ω–∏—è –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞")
                    
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–æ–≥-—Ñ–∞–π–ª–∞: {str(e)}")
                        st.exception(e)
                else:
                    st.info("–õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            else:
                st.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {experiment_dir}")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

elif mode == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤":
    st.markdown('<div class="sub-header">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–æ–≤</div>', unsafe_allow_html=True)
    
    # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞  
    available_configs = [c for c in auction_configs if ('1x' in c or '2x2' in c)]
    if not available_configs:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã.")
        st.stop()
    
    selected_config = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞", available_configs)
    
    if selected_config:
        # –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        model_iterations = find_model_iterations(selected_config)
        
        if model_iterations:
            selected_iter = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Ç–µ—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏", 
                                        model_iterations, 
                                        format_func=lambda x: f"–ò—Ç–µ—Ä–∞—Ü–∏—è {x}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            resolution = st.slider("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–µ—Ç–∫–∏", min_value=20, max_value=100, value=50, step=10)
            
            if st.button("–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω"):
                st.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    from run_train import settings
                    config_settings = settings[selected_config]
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏
                    cfg_module = __import__(f"cfgs.{config_settings['cfg']}", fromlist=["cfg"])
                    temp_cfg = cfg_module.cfg
                    
                    # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
                    model_path = os.path.join(temp_cfg.dir_name, f'model-{selected_iter}.pt')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
                    if not os.path.exists(model_path):
                        st.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
                        st.stop()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    try:
                        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å..."):
                            net, cfg, config_settings = load_cached_model(selected_config, selected_iter, model_path)
                        st.success(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {cfg.net.num_a_layers} —Å–ª–æ–µ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ({cfg.net.num_a_hidden_units} –µ–¥.), {cfg.net.num_p_layers} —Å–ª–æ–µ–≤ –ø–ª–∞—Ç–µ–∂–µ–π ({cfg.net.num_p_hidden_units} –µ–¥.)")
                    except Exception as e:
                        # Fallback –∫ –º–µ—Ç–æ–¥—É –ø–æ–¥–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                        with st.spinner("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏..."):
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint –Ω–∞–ø—Ä—è–º—É—é
                            checkpoint = torch.load(model_path, map_location=torch.device('cpu'))
                            state_dict = checkpoint['model_state_dict']
                            
                            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
                            net_module = __import__(f"nets.{config_settings['net']}", fromlist=["Net"])
                            
                                        # –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫
                            common_configs = [
                                {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 100, 'num_p_hidden': 100},
                                {'num_a_layers': 3, 'num_p_layers': 3, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                {'num_a_layers': 3, 'num_p_layers': 3, 'num_a_hidden': 100, 'num_p_hidden': 100},
                                {'num_a_layers': 1, 'num_p_layers': 1, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                {'num_a_layers': 4, 'num_p_layers': 4, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 200, 'num_p_hidden': 200},
                                {'num_a_layers': 2, 'num_p_layers': 2, 'num_a_hidden': 128, 'num_p_hidden': 128},
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–µ–≤
                                {'num_a_layers': 5, 'num_p_layers': 5, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                {'num_a_layers': 6, 'num_p_layers': 6, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                {'num_a_layers': 6, 'num_p_layers': 6, 'num_a_hidden': 100, 'num_p_hidden': 100},
                                {'num_a_layers': 7, 'num_p_layers': 7, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                {'num_a_layers': 8, 'num_p_layers': 8, 'num_a_hidden': 50, 'num_p_hidden': 50},
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤
                                {'num_a_layers': 4, 'num_p_layers': 4, 'num_a_hidden': 100, 'num_p_hidden': 100},
                                {'num_a_layers': 5, 'num_p_layers': 5, 'num_a_hidden': 100, 'num_p_hidden': 100},
                                {'num_a_layers': 3, 'num_p_layers': 3, 'num_a_hidden': 200, 'num_p_hidden': 200},
                                {'num_a_layers': 4, 'num_p_layers': 4, 'num_a_hidden': 200, 'num_p_hidden': 200},
                            ]
                            
                            net = None
                            cfg = temp_cfg
                            cfg.test.restore_iter = selected_iter
                            successful_config = None
                            
                            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–ª—á–∞
                            for i, config_attempt in enumerate(common_configs):
                                try:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                                    cfg.net.num_a_layers = config_attempt['num_a_layers']
                                    cfg.net.num_p_layers = config_attempt['num_p_layers']
                                    cfg.net.num_a_hidden_units = config_attempt['num_a_hidden']
                                    cfg.net.num_p_hidden_units = config_attempt['num_p_hidden']
                                    
                                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ç—å
                                    net = net_module.Net(cfg)
                                    
                                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
                                    net.load_state_dict(state_dict)
                                    net.eval()
                                    
                                    successful_config = config_attempt
                                    break
                                    
                                except Exception:
                                    # –¢–∏—Ö–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                                    continue
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ
                            if net is not None:
                                st.success(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π: {successful_config['num_a_layers']} —Å–ª–æ–µ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ({successful_config['num_a_hidden']} –µ–¥.), {successful_config['num_p_layers']} —Å–ª–æ–µ–≤ –ø–ª–∞—Ç–µ–∂–µ–π ({successful_config['num_p_hidden']} –µ–¥.)")
                            else:
                                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
                    clip_ops = __import__("clip_ops.clip_ops", fromlist=[config_settings['clip_op']])
                    clip_op = getattr(clip_ops, config_settings['clip_op'])
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Trainer
                    from trainer import Trainer
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    trainer = Trainer(cfg, 'test', net, clip_op)
                    trainer.net.eval()
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Ç–æ—á–µ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                    D = resolution
                    x = np.linspace(0, 1.0, D)
                    
                    # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if '1x2' in selected_config:  # 1 –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, 2 –ø—Ä–µ–¥–º–µ—Ç–∞
                        D = resolution
                        x = np.linspace(0, 1.0, D)
                        X_grid = np.stack([v.flatten() for v in np.meshgrid(x, x)], axis=-1)
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
                        if '04_03' in selected_config:
                            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ [4,3]
                            X_grid[:, 0] = X_grid[:, 0] * 4.0
                            X_grid[:, 1] = X_grid[:, 1] * 3.0
                            x_extent = [0, 4, 0, 3]
                            aspect_ratio = 4/3
                        elif '416_47' in selected_config:
                            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ [4,16] √ó [4,7]
                            X_grid[:, 0] = X_grid[:, 0] * 12.0 + 4.0  # [0,1] -> [4,16]
                            X_grid[:, 1] = X_grid[:, 1] * 3.0 + 4.0   # [0,1] -> [4,7]
                            x_extent = [4, 16, 4, 7]
                            aspect_ratio = 12/3  # (16-4)/(7-4) = 12/3 = 4.0
                        elif 'triangle' in selected_config:
                            # –ú–∞—Å–∫–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –≥–¥–µ v1+v2 >= 1
                            mask = X_grid.sum(-1) >= 1.0
                            X_grid[mask] = 0.0
                            x_extent = [0, 1, 0, 1]
                            aspect_ratio = 1.0
                        elif '23' in selected_config:
                            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ [2,3] √ó [2,3]
                            X_grid[:, 0] = X_grid[:, 0] * 1.0 + 2.0   # [0,1] -> [2,3]
                            X_grid[:, 1] = X_grid[:, 1] * 1.0 + 2.0   # [0,1] -> [2,3]
                            x_extent = [2, 3, 2, 3]
                            aspect_ratio = 1.0  # (3-2)/(3-2) = 1/1 = 1.0
                        else:
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ [0,1]x[0,1]
                            x_extent = [0, 1, 0, 1]
                            aspect_ratio = 1.0
                        
                        X_grid = np.expand_dims(X_grid, 1)  # (D*D, 1, 2)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
                        device = next(trainer.net.parameters()).device  # –ü–æ–ª—É—á–∞–µ–º device –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏
                        X_tensor = torch.from_numpy(X_grid).float().to(device)
                        with torch.no_grad():
                            allocs, payments = trainer.net(X_tensor)
                        allocs = allocs.cpu().numpy()
                        payments = payments.cpu().numpy()
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ç–∫–µ
                        alloc1 = allocs[:, 0, 0].reshape(D, D)
                        alloc2 = allocs[:, 0, 1].reshape(D, D)
                        payment = payments[:, 0].reshape(D, D)
                        
                        # –°–æ–∑–¥–∞–µ–º 3D –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        fig = plt.figure(figsize=(18, 6))
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                        ax1 = fig.add_subplot(131, projection='3d')
                        xx, yy = np.meshgrid(x, x)
                        surf1 = ax1.plot_surface(xx, yy, alloc1, cmap=cm.coolwarm, linewidth=0, antialiased=True)
                        ax1.set_xlabel('–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 1')
                        ax1.set_ylabel('–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 2')
                        ax1.set_zlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 1')
                        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 1')
                        fig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=5)
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                        ax2 = fig.add_subplot(132, projection='3d')
                        surf2 = ax2.plot_surface(xx, yy, alloc2, cmap=cm.coolwarm, linewidth=0, antialiased=True)
                        ax2.set_xlabel('–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 1')
                        ax2.set_ylabel('–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 2')
                        ax2.set_zlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 2')
                        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 2')
                        fig.colorbar(surf2, ax=ax2, shrink=0.5, aspect=5)
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
                        ax3 = fig.add_subplot(133, projection='3d')
                        surf3 = ax3.plot_surface(xx, yy, payment, cmap=cm.coolwarm, linewidth=0, antialiased=True)
                        ax3.set_xlabel('–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 1')
                        ax3.set_ylabel('–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 2')
                        ax3.set_zlabel('–ü–ª–∞—Ç–µ–∂')
                        ax3.set_title('–§—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞')
                        fig.colorbar(surf3, ax=ax3, shrink=0.5, aspect=5)
                        
                        plt.tight_layout()
                        st.pyplot(fig)
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
                        st.markdown("### –¢–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        plt.rcParams.update({'font.size': 10, 'axes.labelsize': 'x-large'})
                        fig, axes = plt.subplots(1, 3, figsize=(18, 6))
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
                        boundary_points_1 = []
                        boundary_points_2 = []
                        
                        if 'unit' in selected_config:
                            # –î–ª—è unit demand –∞—É–∫—Ü–∏–æ–Ω–æ–≤
                            if '23' in selected_config:
                                # –î–ª—è unit_1x2_uniform_23 (–æ–±–ª–∞—Å—Ç—å [2,3] √ó [2,3])
                                # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–∑ visualize_unit_1x2_uniform_23.ipynb
                                x1 = 4.0/3.0 + np.sqrt(4.0 + 3.0/2.0)/3.0
                                points1 = [(3.0 - 1.0/3.0, 3.0), (2.0, 2.0 + 1.0/3.0)]                    
                                points2 = [(2.0, 2 * x1 - 2.0), (2 * x1 - 2.0, 2.0)]                 
                                points3 = [(2.0 + 1.0/3.0, 2.0), (3.0, 3.0 - 1.0/3.0)]
                                # –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ 1 –∏ 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                                boundary_points_1 = [points1, points2, points3]
                                boundary_points_2 = [points1, points2, points3]
                            else:
                                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π unit —Å–ª—É—á–∞–π
                                x1_boundary = np.sqrt(3.0) / 3.0
                                boundary_points_1 = [(x1_boundary, 0), (x1_boundary, x1_boundary), (1.0, 1.0)]
                                boundary_points_2 = [(0.0, x1_boundary), (x1_boundary, x1_boundary), (1.0, 1.0)]
                        elif 'additive' in selected_config:
                            if 'triangle' in selected_config:
                                # –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                                x1_boundary = np.sqrt(1.0/3.0)
                                boundary_points_1 = [(x1_boundary, 0), (0, x1_boundary)]
                                boundary_points_2 = [(x1_boundary, 0), (0, x1_boundary)]
                            elif '04_03' in selected_config:
                                # –î–ª—è additive_1x2_uniform_04_03 - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞ [0,4] √ó [0,3]
                                x1 = (2.0 - np.sqrt(2.0)) / 3.0 * 4.0  # –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞ [0,4]
                                x2 = 2.0 / 3.0 * 3.0  # –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞ [0,3]
                                boundary_points_1 = [(x1, 3.0), (x1, x2), (x2*4.0/3.0, x1*3.0/4.0), (x2*4.0/3.0, 0)]
                                boundary_points_2 = [(0.0, x2), (x1, x2), (x2*4.0/3.0, x1*3.0/4.0), (4.0, x1*3.0/4.0)]
                            elif '416_47' in selected_config:
                                # –î–ª—è additive_1x2_uniform_416_47 - –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ visualize_asymetric_daskalakis.ipynb
                                boundary_points_1 = [(4, 6), (8, 4), (8, 7)]
                                boundary_points_2 = [(4, 6), (8, 4)]
                            else:
                                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π additive —Å–ª—É—á–∞–π
                                x1_boundary = (2.0 - np.sqrt(2.0)) / 3.0
                                x2_boundary = 2.0 / 3.0
                                boundary_points_1 = [(x1_boundary, 1.0), (x1_boundary, x2_boundary), (x2_boundary, x1_boundary), (x2_boundary, 0)]
                                boundary_points_2 = [(0.0, x2_boundary), (x1_boundary, x2_boundary), (x2_boundary, x1_boundary), (1.0, x1_boundary)]
                        
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        alloc1_display = alloc1.copy()
                        alloc2_display = alloc2.copy()
                        payment_display = payment.copy()
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        if 'triangle' in selected_config:
                            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –≥–¥–µ v1+v2 >= 1
                            x_coords = np.linspace(0, 1.0, D)
                            XX, YY = np.meshgrid(x_coords, x_coords)
                            triangle_mask = XX + YY >= 1.0
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
                            from matplotlib.colors import ListedColormap
                            import matplotlib.pyplot as plt
                            from copy import copy
                            palette = copy(plt.cm.YlOrRd)
                            palette.set_over('w')  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
                            
                            alloc1_display[triangle_mask] = 10.0
                            alloc2_display[triangle_mask] = 10.0 
                            payment_display[triangle_mask] = 10.0
                            cmap_to_use = palette
                        else:
                            cmap_to_use = 'YlOrRd'
                        
                        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 1
                        im1 = axes[0].imshow(alloc1_display[::-1], extent=x_extent, vmin=0.0, vmax=1.0, 
                                           cmap=cmap_to_use, aspect=aspect_ratio)
                        axes[0].set_title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 1')
                        axes[0].set_xlabel('$v_1$')
                        axes[0].set_ylabel('$v_2$')
                        fig.colorbar(im1, ax=axes[0], fraction=0.046, pad=0.04)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
                        if boundary_points_1:
                            if '23' in selected_config and 'unit' in selected_config:
                                # –î–ª—è unit_1x2_uniform_23 —Ä–∏—Å—É–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                                for line_points in boundary_points_1:
                                    x_coords = [p[0] for p in line_points]
                                    y_coords = [p[1] for p in line_points]
                                    axes[0].plot(x_coords, y_coords, linewidth=2, linestyle='--', c='black')
                            else:
                                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π - –æ–¥–Ω–∞ –ª–∏–Ω–∏—è
                                x_coords = [p[0] for p in boundary_points_1]
                                y_coords = [p[1] for p in boundary_points_1]
                                axes[0].plot(x_coords, y_coords, linewidth=2, linestyle='--', c='black')
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
                            if 'unit' in selected_config:
                                if '23' in selected_config:
                                    # –ü–æ–¥–ø–∏—Å–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ notebook
                                    axes[0].text(2.2, 2.8, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(2.05, 2.05, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(2.5, 2.5, s='0.5', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(2.8, 2.2, s='1', color='black', fontsize='10', fontweight='bold')
                                else:
                                    axes[0].text(0.2, 0.4, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(0.8, 0.4, s='1', color='black', fontsize='10', fontweight='bold')
                            elif 'additive' in selected_config:
                                if 'triangle' in selected_config:
                                    axes[0].text(0.15, 0.15, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(0.4, 0.4, s='1', color='black', fontsize='10', fontweight='bold')
                                elif '04_03' in selected_config:
                                    # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ [0,4] √ó [0,3]
                                    axes[0].text(1.0, 1.0, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(2.6, 2.6, s='1', color='black', fontsize='10', fontweight='bold')
                                elif '416_47' in selected_config:
                                    # –ü–æ–¥–ø–∏—Å–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ notebook –¥–ª—è [4,16] √ó [4,7]
                                    axes[0].text(5, 4.5, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(5.25, 6, s='0.5', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(11.5, 5.5, s='1', color='black', fontsize='10', fontweight='bold')
                                else:
                                    axes[0].text(0.25, 0.25, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[0].text(0.65, 0.65, s='1', color='black', fontsize='10', fontweight='bold')
                        
                        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 2
                        im2 = axes[1].imshow(alloc2_display[::-1], extent=x_extent, vmin=0.0, vmax=1.0, 
                                           cmap=cmap_to_use, aspect=aspect_ratio)
                        axes[1].set_title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 2')
                        axes[1].set_xlabel('$v_1$')
                        axes[1].set_ylabel('$v_2$')
                        fig.colorbar(im2, ax=axes[1], fraction=0.046, pad=0.04)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
                        if boundary_points_2:
                            if '23' in selected_config and 'unit' in selected_config:
                                # –î–ª—è unit_1x2_uniform_23 —Ä–∏—Å—É–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                                for line_points in boundary_points_2:
                                    x_coords = [p[0] for p in line_points]
                                    y_coords = [p[1] for p in line_points]
                                    axes[1].plot(x_coords, y_coords, linewidth=2, linestyle='--', c='black')
                            else:
                                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π - –æ–¥–Ω–∞ –ª–∏–Ω–∏—è
                                x_coords = [p[0] for p in boundary_points_2]
                                y_coords = [p[1] for p in boundary_points_2]
                                axes[1].plot(x_coords, y_coords, linewidth=2, linestyle='--', c='black')
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
                            if 'unit' in selected_config:
                                if '23' in selected_config:
                                    # –ü–æ–¥–ø–∏—Å–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ notebook –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ 2
                                    axes[1].text(2.2, 2.8, s='1', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(2.05, 2.05, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(2.5, 2.5, s='0.5', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(2.8, 2.2, s='0', color='black', fontsize='10', fontweight='bold')
                                else:
                                    axes[1].text(0.6, 0.4, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(0.4, 0.8, s='1', color='black', fontsize='10', fontweight='bold')
                            elif 'additive' in selected_config:
                                if 'triangle' in selected_config:
                                    axes[1].text(0.15, 0.15, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(0.4, 0.4, s='1', color='black', fontsize='10', fontweight='bold')
                                elif '04_03' in selected_config:
                                    # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ [0,4] √ó [0,3] –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ 2
                                    axes[1].text(1.0, 1.0, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(2.6, 2.6, s='1', color='black', fontsize='10', fontweight='bold')
                                elif '416_47' in selected_config:
                                    # –ü–æ–¥–ø–∏—Å–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ notebook –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ 2
                                    axes[1].text(5, 4.5, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(11.5, 5.5, s='1', color='black', fontsize='10', fontweight='bold')
                                else:
                                    axes[1].text(0.25, 0.25, s='0', color='black', fontsize='10', fontweight='bold')
                                    axes[1].text(0.65, 0.65, s='1', color='black', fontsize='10', fontweight='bold')
                        
                        # –ì—Ä–∞—Ñ–∏–∫ 3: –ü–ª–∞—Ç–µ–∂–∏
                        im3 = axes[2].imshow(payment_display[::-1], extent=x_extent, cmap=cmap_to_use, 
                                           aspect=aspect_ratio)
                        axes[2].set_title('–ü–ª–∞—Ç–µ–∂')
                        axes[2].set_xlabel('$v_1$')
                        axes[2].set_ylabel('$v_2$')
                        fig.colorbar(im3, ax=axes[2], fraction=0.046, pad=0.04)
                        
                        plt.tight_layout()
                        st.pyplot(fig)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write(f"**–¢–∏–ø –∞–≥–µ–Ω—Ç–∞:** {cfg.agent_type}")
                            st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤:** {cfg.num_agents}")
                            st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:** {cfg.num_items}")
                            st.write(f"**–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:** {cfg.distribution_type}")
                            
                        with col2:
                            st.write(f"**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:**")
                            st.write(f"- –°–ª–æ–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {cfg.net.num_a_layers}")
                            st.write(f"- –°–ª–æ–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {cfg.net.num_p_layers}")
                            st.write(f"- –°–∫—Ä—ã—Ç—ã–µ —é–Ω–∏—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {cfg.net.num_a_hidden_units}")
                            st.write(f"- –°–∫—Ä—ã—Ç—ã–µ —é–Ω–∏—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π: {cfg.net.num_p_hidden_units}")
                            st.write(f"- –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {cfg.net.activation}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
                            st.write(f"**–ò—Ç–µ—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏:** {selected_iter}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
                        st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
                        col1, col2, col3 = st.columns(3)
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
                        if 'triangle' in selected_config:
                            # –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
                            valid_mask = ~triangle_mask
                            valid_alloc1 = alloc1[valid_mask]
                            valid_alloc2 = alloc2[valid_mask]
                            valid_payment = payment[valid_mask]
                        else:
                            valid_alloc1 = alloc1
                            valid_alloc2 = alloc2 
                            valid_payment = payment
                        
                        with col1:
                            st.metric("–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 1", f"{np.mean(valid_alloc1):.4f}")
                            st.metric("–ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–º–µ—Ç–∞ 1", f"{np.max(valid_alloc1):.4f}")
                            
                        with col2:
                            st.metric("–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 2", f"{np.mean(valid_alloc2):.4f}")
                            st.metric("–ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–º–µ—Ç–∞ 2", f"{np.max(valid_alloc2):.4f}")
                            
                        with col3:
                            st.metric("–°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂", f"{np.mean(valid_payment):.4f}")
                            st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", f"{np.max(valid_payment):.4f}")
                            
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                        st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏")
                        if 'triangle' in selected_config:
                            st.info("**–¢—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ**: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –æ–±–ª–∞—Å—Ç—å—é –≥–¥–µ v‚ÇÅ + v‚ÇÇ ‚â§ 1")
                        elif '04_03' in selected_config:
                            st.info("**–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ**: v‚ÇÅ ‚àà [0,4], v‚ÇÇ ‚àà [0,3]")
                        elif '416_47' in selected_config:
                            st.info("**–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ**: v‚ÇÅ ‚àà [4,16], v‚ÇÇ ‚àà [4,7]")
                        elif '23' in selected_config:
                            st.info("**–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ**: v‚ÇÅ ‚àà [2,3], v‚ÇÇ ‚àà [2,3]")
                        else:
                            st.info("**–ï–¥–∏–Ω–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ**: v‚ÇÅ, v‚ÇÇ ‚àà [0,1]")
                        
                    elif '1x10' in selected_config or any(x in selected_config for x in ['1x3', '1x4', '1x5', '1x6', '1x7', '1x8', '1x9', '1x10']):  # 1 –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –º–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                        st.warning("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
                        st.info(f"–î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {selected_config} —Å–ª–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.")
                        
                        # –ú–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        try:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                            num_items = cfg.num_items
                            st.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ: {num_items}")
                            
                            # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                            np.random.seed(42)
                            sample_size = 1000
                            sample_data = np.random.rand(sample_size, 1, num_items)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
                            device = next(trainer.net.parameters()).device
                            X_tensor = torch.from_numpy(sample_data).float().to(device)
                            with torch.no_grad():
                                allocs, payments = trainer.net(X_tensor)
                            allocs = allocs.cpu().numpy()
                            payments = payments.cpu().numpy()
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
                            st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º")
                            cols = st.columns(min(5, num_items))  # –ù–µ –±–æ–ª–µ–µ 5 –∫–æ–ª–æ–Ω–æ–∫
                            
                            for i in range(num_items):
                                col_idx = i % len(cols)
                                with cols[col_idx]:
                                    item_allocs = allocs[:, 0, i]
                                    st.metric(f"–ü—Ä–µ–¥–º–µ—Ç {i+1}", 
                                             f"–°—Ä–µ–¥–Ω: {np.mean(item_allocs):.4f}",
                                             f"–ú–∞–∫—Å: {np.max(item_allocs):.4f}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
                            st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
                            agent_payments = payments[:, 0]
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("–°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂", f"{np.mean(agent_payments):.4f}")
                            with col2:
                                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", f"{np.max(agent_payments):.4f}")
                            with col3:
                                st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", f"{np.min(agent_payments):.4f}")
                            
                            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
                            fig, ax = plt.subplots(figsize=(10, 6))
                            ax.hist(agent_payments, bins=50, alpha=0.7, edgecolor='black')
                            ax.set_xlabel('–ü–ª–∞—Ç–µ–∂')
                            ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
                            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π')
                            ax.grid(True, alpha=0.3)
                            st.pyplot(fig)
                            
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—É–∫—Ü–∏–æ–Ω–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏: {str(e)}")
                            st.exception(e)
                    
                    elif '2x2' in selected_config:  # 2 –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, 2 –ø—Ä–µ–¥–º–µ—Ç–∞
                        st.warning("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è 2x2 –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
                        st.info("–î–ª—è 2x2 –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å 4D (2 –∞–≥–µ–Ω—Ç–∞ √ó 2 –ø—Ä–µ–¥–º–µ—Ç–∞)")
                        
                        # –ë–∞–∑–æ–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è 2x2 - —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                        st.markdown("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö –∞–≥–µ–Ω—Ç–∞ 2")
                        
                        # –ü–æ–ª–∑—É–Ω–∫–∏ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                        col1, col2 = st.columns(2)
                        with col1:
                            v2_item1 = st.slider("–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 2 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 1", 0.0, 1.0, 0.5, 0.1)
                        with col2:
                            v2_item2 = st.slider("–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 2 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 2", 0.0, 1.0, 0.5, 0.1)
                        
                        if st.button("–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å 2x2 –∞—É–∫—Ü–∏–æ–Ω"):
                            try:
                                D = resolution
                                x = np.linspace(0, 1.0, D)
                                
                                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, —Ñ–∏–∫—Å–∏—Ä—É—è —Å—Ç–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ
                                X_grid = []
                                for v1_1 in x:
                                    for v1_2 in x:
                                        # [–∞–≥–µ–Ω—Ç1_–ø—Ä–µ–¥–º–µ—Ç1, –∞–≥–µ–Ω—Ç1_–ø—Ä–µ–¥–º–µ—Ç2, –∞–≥–µ–Ω—Ç2_–ø—Ä–µ–¥–º–µ—Ç1, –∞–≥–µ–Ω—Ç2_–ø—Ä–µ–¥–º–µ—Ç2]
                                        X_grid.append([v1_1, v1_2, v2_item1, v2_item2])
                                
                                X_grid = np.array(X_grid).reshape(D*D, 2, 2)  # (batch, agents, items)
                                
                                # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
                                device = next(trainer.net.parameters()).device
                                X_tensor = torch.from_numpy(X_grid).float().to(device)
                                with torch.no_grad():
                                    allocs, payments = trainer.net(X_tensor)
                                allocs = allocs.cpu().numpy()
                                payments = payments.cpu().numpy()
                                
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                                # allocs: (batch, agents, items), payments: (batch, agents)
                                agent1_item1 = allocs[:, 0, 0].reshape(D, D)  # –ê–≥–µ–Ω—Ç 1 –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç 1
                                agent1_item2 = allocs[:, 0, 1].reshape(D, D)  # –ê–≥–µ–Ω—Ç 1 –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç 2
                                agent1_payment = payments[:, 0].reshape(D, D)  # –ü–ª–∞—Ç–µ–∂ –∞–≥–µ–Ω—Ç–∞ 1
                                
                                # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
                                fig, axes = plt.subplots(1, 3, figsize=(18, 6))
                                
                                # –ì—Ä–∞—Ñ–∏–∫ 1: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 1 –∞–≥–µ–Ω—Ç–æ–º 1
                                im1 = axes[0].imshow(agent1_item1[::-1], extent=[0, 1, 0, 1], vmin=0.0, vmax=1.0, 
                                                   cmap='YlOrRd')
                                axes[0].set_title('–ê–≥–µ–Ω—Ç 1: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 1')
                                axes[0].set_xlabel('–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 1 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 1')
                                axes[0].set_ylabel('–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 1 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 2')
                                fig.colorbar(im1, ax=axes[0], fraction=0.046, pad=0.04)
                                
                                # –ì—Ä–∞—Ñ–∏–∫ 2: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 2 –∞–≥–µ–Ω—Ç–æ–º 1
                                im2 = axes[1].imshow(agent1_item2[::-1], extent=[0, 1, 0, 1], vmin=0.0, vmax=1.0, 
                                                   cmap='YlOrRd')
                                axes[1].set_title('–ê–≥–µ–Ω—Ç 1: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 2')
                                axes[1].set_xlabel('–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 1 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 1')
                                axes[1].set_ylabel('–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 1 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 2')
                                fig.colorbar(im2, ax=axes[1], fraction=0.046, pad=0.04)
                                
                                # –ì—Ä–∞—Ñ–∏–∫ 3: –ü–ª–∞—Ç–µ–∂ –∞–≥–µ–Ω—Ç–∞ 1
                                im3 = axes[2].imshow(agent1_payment[::-1], extent=[0, 1, 0, 1], 
                                                   cmap='YlOrRd')
                                axes[2].set_title('–ü–ª–∞—Ç–µ–∂ –∞–≥–µ–Ω—Ç–∞ 1')
                                axes[2].set_xlabel('–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 1 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 1')
                                axes[2].set_ylabel('–°—Ç–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ 1 –∑–∞ –ø—Ä–µ–¥–º–µ—Ç 2')
                                fig.colorbar(im3, ax=axes[2], fraction=0.046, pad=0.04)
                                
                                plt.tight_layout()
                                st.pyplot(fig)
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ 1")
                                col1, col2, col3 = st.columns(3)
                                
                                with col1:
                                    st.metric("–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 1", f"{np.mean(agent1_item1):.4f}")
                                    st.metric("–ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–º–µ—Ç–∞ 1", f"{np.max(agent1_item1):.4f}")
                                    
                                with col2:
                                    st.metric("–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ 2", f"{np.mean(agent1_item2):.4f}")
                                    st.metric("–ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–º–µ—Ç–∞ 2", f"{np.max(agent1_item2):.4f}")
                                    
                                with col3:
                                    st.metric("–°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂", f"{np.mean(agent1_payment):.4f}")
                                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", f"{np.max(agent1_payment):.4f}")
                                
                                st.info(f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞ 2: –ø—Ä–µ–¥–º–µ—Ç 1 = {v2_item1:.1f}, –ø—Ä–µ–¥–º–µ—Ç 2 = {v2_item2:.1f}")
                                
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ 2x2 –∞—É–∫—Ü–∏–æ–Ω–∞: {str(e)}")
                                st.exception(e)
                    
                    else:
                        st.warning(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {selected_config} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                        st.info("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:")
                        st.write("‚Ä¢ 1x2 - –∞—É–∫—Ü–∏–æ–Ω—ã —Å 1 –∞–≥–µ–Ω—Ç–æ–º –∏ 2 –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏")
                        st.write("‚Ä¢ 1x10 - –∞—É–∫—Ü–∏–æ–Ω—ã —Å 1 –∞–≥–µ–Ω—Ç–æ–º –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏") 
                        st.write("‚Ä¢ 2x2 - –∞—É–∫—Ü–∏–æ–Ω—ã —Å 2 –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ 2 –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write(f"**–¢–∏–ø –∞–≥–µ–Ω—Ç–∞:** {cfg.agent_type}")
                            st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤:** {cfg.num_agents}")
                            st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:** {cfg.num_items}")
                            st.write(f"**–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:** {cfg.distribution_type}")
                            
                        with col2:
                            st.write(f"**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:**")
                            st.write(f"- –°–ª–æ–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {cfg.net.num_a_layers}")
                            st.write(f"- –°–ª–æ–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {cfg.net.num_p_layers}")
                            st.write(f"- –°–∫—Ä—ã—Ç—ã–µ —é–Ω–∏—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {cfg.net.num_a_hidden_units}")
                            st.write(f"- –°–∫—Ä—ã—Ç—ã–µ —é–Ω–∏—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π: {cfg.net.num_p_hidden_units}")
                            st.write(f"- –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {cfg.net.activation}")
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞: {str(e)}")
                    st.exception(e)
        else:
            st.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {selected_config}")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Streamlit –≤ requirements.txt
import subprocess
try:
    with open("requirements.txt", "r") as f:
        requirements = f.read()
    
    if "streamlit" not in requirements:
        with open("requirements.txt", "a") as f:
            f.write("\nstreamlit>=1.15.0\n")
except Exception as e:
    st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ requirements.txt: {str(e)}") 